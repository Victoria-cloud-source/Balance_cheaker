import json
import time
from web3 import Web3

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ç–µ–π
with open('networks.json', 'r') as f:
    NETWORKS = json.load(f)

def select_network():
    print("üåê –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    for idx, (key, net) in enumerate(NETWORKS.items(), start=1):
        print(f"{idx}. {net['name']}")
    
    choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ç–∏: ")) - 1
    network_keys = list(NETWORKS.keys())
    selected_key = network_keys[choice]
    selected_network = NETWORKS[selected_key]

    return selected_network

def load_wallets(filename="wallets.txt"):
    try:
        with open(filename, 'r') as f:
            addresses = [line.strip() for line in f if line.strip()]
        return addresses
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []

def get_balance(w3, address):
    try:
        checksum_address = w3.toChecksumAddress(address)
        balance_wei = w3.eth.get_balance(checksum_address)
        balance_eth = w3.fromWei(balance_wei, 'ether')
        return float(balance_eth)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def main():
    print("üßæ EVM –ë–∞–ª–∞–Ω—Å —á–µ–∫–µ—Ä v1.0\n")

    network = select_network()
    print(f"\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {network['name']}...\n")

    w3 = Web3(Web3.HTTPProvider(network["rpc_url"]))
    
    if not w3.is_connected():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–∑–ª—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ RPC URL –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
        return

    wallets = load_wallets()
    if not wallets:
        print("‚ùå –ù–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å—ã –Ω–∞ {network['name']} ({len(wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤)\n")

    for i, address in enumerate(wallets, start=1):
        balance = get_balance(w3, address)
        if isinstance(balance, float):
            print(f"[{i}/{len(wallets)}] {address} ‚Üí {balance:.6f} {w3.chain_id_to_currency_symbol(w3.eth.chain_id)}")
        else:
            print(f"[{i}/{len(wallets)}] {address} ‚Üí ‚ùå {balance}")
        time.sleep(0.3)

if __name__ == "__main__":
    main()
